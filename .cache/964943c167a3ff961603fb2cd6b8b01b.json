{"dependencies":[{"name":"./math.js","dynamic":true},{"name":"./MathJax/MathJax.js","dynamic":true},{"name":"./index.js","dynamic":true},{"name":"./style.css","dynamic":true}],"generated":{"html":"<!doctype html>\n<html lang=\"en\">\n<head>\n\t<!--<script src=\"math.js\"></script> -->\n\t<script src=\"/e74f596e38c1a0df0e7763201fec7bf7.js\"></script>\n\t<script async=\"\" src=\"/a07309246ccad4fe5244c5b43916e90c.js?config=TeX-AMS-MML_HTMLorMML.js\"></script>\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<style>\n    #flexer{\n        display:flex;\n        flex-direction: column;\n    }\n</style>\n<body>\n\n<div id=\"flexer\">\n\n    <div>YADL DIII</div>\n    <div id=\"plot\"></div>\n</div>\n</body>\n<script src=\"/5145833f18cfafb670af93cb46a51c86.js\"></script>\n<link rel=\"stylesheet\" href=\"/d5c1f30da1b4fbe47ac1740d48dd3a6c.css\">\n\n\n<input type=\"textarea\" name=\"textfield\" id=\"input-textfield\">\n= <div id=\"simplified\"></div>\n<div id=\"pretty\"></div>\n<button type=\"button\" id=\"evaluate-button\">Symbolicate</button>\n<br>\n<p id=\"output-text\"></p>\n\n<script>\n    import math from \"math.js\"\nvar button = document.getElementById('evaluate-button');\n\nbutton.addEventListener('click', function(e) {\n\tvar inputValue = document.getElementById('input-textfield').value;\n\tvar simplifiedInput = math.simplify(inputValue);\n\tdocument.getElementById('simplified').innerHTML = simplifiedInput;\n\n\tvar simplifiedLatex = simplifiedInput.toTex();\n\tdocument.getElementById('pretty').innerHTML = '$$' + simplifiedLatex + '$$';\n\n\t\n\t//var node = math.parse(simplifiedInput);\n\t\n\t// this is the tree of the equation\n\tsimplifiedInput.traverse(function (node, path, parent) {\n\t\tvar nodeValue = \"\";\n\t\tif (node.type == 'OperatorNode') {\n\t\t\tnodeValue = node.op;\n\t\t} else if (node.type == 'ConstantNode') {\n\t\t\tnodeValue = node.value;\n\t\t} else if (node.type == 'SymbolNode') {\n\t\t\tnodeValue = node.name;\n\t\t} else if (node.type == 'FunctionNode') {\n\t\t\tnodeValue = node.fn;\n\t\t}\n\t\t\n\t\tvar newParagraoh = document.createElement(\"P\");                       // Create a <p> element\n\t\tvar textNode = document.createTextNode(\"[\" + node.type + \": \" + nodeValue + \"]\"); \n\t\tnewParagraoh.appendChild(textNode);    \n\t \tdocument.getElementById('output-text').appendChild(newParagraoh);\n\t});\n\tMathJax.Hub.Typeset()\n\n});\n</script>\n\n</html>"},"hash":"fa07867117437821091b883f1dc54138","cacheData":{}}